REGISTER '/usr/lib/hbase/hbase-0.90.4-cdh3u3.jar'
REGISTER '/usr/lib/hbase/lib/guava-r06.jar'
REGISTER '/usr/lib/zookeeper/zookeeper-3.3.5-cdh3u6.jar'
REGISTER './logp-common-1.7.jar'
REGISTER './pig-to-json.jar'
REGISTER './json_simple-1.1.jar'

--fcurlog = load 'hbase://smalluser' USING  org.apache.pig.backend.hadoop.hbase.HBaseStorage('r:amt r:dco r:rtb r:minproc','-loadKey true') AS (id:chararray,  amt:bag{T:tuple(formatId:int, versionid:int, urid:chararray, pixelId:chararray,userid:chararray, timestamp:long, pageURL:chararray, referrelURL:chararray, userAgent: chararray, ip:chararray, countryId: int, regionId: int, cityId: int, paramString:chararray, reqType: chararray, pixelType: chararray, tagType: chararray, responseTimeInMS: int, status:int)},dco:bag{T1:tuple(formatId:int, versionid:int, userId:chararray, timestamp:long, pageURL:chararray, referrelURL:chararray, userAgent: chararray, ip:chararray, countryId: int, regionId: int, cityId: int, paramString:chararray, reqType: chararray, pixelType: chararray, tagType: chararray, responseTimeInMS: int,partnerId: int, businessVertical:chararray, action:chararray, jsonString: chararray)},rtb:bag{T2:tuple(invalidLL: int,invalidLLForReporting: int,isClickvalidationFailed: int,isViewConv: int,isClickConv: int,invalidLF: int,browserId: int,timestamp: long,isLearning: int,processorId: int,sourceComponent: int,aggregatorId: int,requestUri: chararray,userCookie: (userId: chararray,timestamp: long),userIp: chararray,countryId: int,regionId: int,cityId: int,metroId: int,dma: int,timezone: int,userAgent: chararray,publisherId: long,siteId: long,foldPosition: int,referrer: chararray,uniqueResponseId: chararray,uniqueRowId: chararray,trackerId: int,dataVersion: long,totalProcessingTime: long,initializationTime: long,requestParsingTime: long,requestProcessingTime: long,advertiserId: long,advertiserIoId: long,advertiserLiId: long,creativeId: long,inventorySourceId: long,bidStrategyTypeId: int,pixelId: long,contentCategoryId: int,userSegmentId: int,creativeWidth: int,creativeHeight: int,bucketizedCreativeHeight: int,bucketizedCreativeWidth: int,bucketizedAdvertiserLiFrequency: int,trackingType: int,winningBidPrice: double,impressions: long,conversions: long,clicks: long,creativeOfferType: int,moneySpent: double,licenseeCost: double,licenseeRevenue: double,platformCost: double,platformRevenue: double,statusCode: int,impressionClickValidationStatusCode: int,advertiserTargetingExpression: chararray,userSegments: {t: (segmentId: int,weight: float)},conversionType: int,creativeViewFrequency: int,creativeClickFrequency: int,advertiserIoViewFrequency: int,advertiserIoClickFrequency: int,impressionPiggybackPixels: {t: (id: int)},creativeViewFrequencyOld: int,dataCenterId: int,adSpotId: long,pageType: int,numSlots: int,slotPosition: int,debugStatusCode: long,targetedSegments: {t: (id: int)},blockedSegments: {t: (id: int)})},minproc:bag{T:tuple(invalidLL: int,timestamp: long,aggregatorId: int,urid: chararray,isLearning: int,userCookie: chararray,country: int,region: int,city: int,siteId: long,foldPosition: int,learningPercentage: double,pageCategories: {t: (categoryId: int,categoryWeight: double)},bidInfoListSize: int,bids: {t: (advLiId: long,advIoId: long,advId: long,bidAmount: double,matchingPageCategoryId: int,creativeHeight: int,creativeWidth: int,matchingUserSegmentId: int)},eligibleLisByType: {t: (eligibleLiType: int,eligibleLis: {t: (eligibleLiId: int)})})});
--describe fcurlog;

--store fcurlog into '/user/sbalasubramanian/intermediate' using PigStorage('\t');

fcurlog = load '/user/sbalasubramanian/intermediate' using PigStorage('\t') AS (id:chararray,  amt:bag{T:tuple(formatId:int, versionid:int, urid:chararray, pixelId:chararray,userid:chararray, timestamp:long, pageURL:chararray, referrelURL:chararray, userAgent: chararray, ip:chararray, countryId: int, regionId: int, cityId: int, paramString:chararray, reqType: chararray, pixelType: chararray, tagType: chararray, responseTimeInMS: int, status:int)},dco:bag{T1:tuple(formatId:int, versionid:int, userId:chararray, timestamp:long, pageURL:chararray, referrelURL:chararray, userAgent: chararray, ip:chararray, countryId: int, regionId: int, cityId: int, paramString:chararray, reqType: chararray, pixelType: chararray, tagType: chararray, responseTimeInMS: int,partnerId: int, businessVertical:chararray, action:chararray, jsonString: chararray)},rtb:bag{T2:tuple(invalidLL: int,invalidLLForReporting: int,isClickvalidationFailed: int,isViewConv: int,isClickConv: int,invalidLF: int,browserId: int,timestamp: long,isLearning: int,processorId: int,sourceComponent: int,aggregatorId: int,requestUri: chararray,userCookie: (userId: chararray,timestamp: long),userIp: chararray,countryId: int,regionId: int,cityId: int,metroId: int,dma: int,timezone: int,userAgent: chararray,publisherId: long,siteId: long,foldPosition: int,referrer: chararray,uniqueResponseId: chararray,uniqueRowId: chararray,trackerId: int,dataVersion: long,totalProcessingTime: long,initializationTime: long,requestParsingTime: long,requestProcessingTime: long,advertiserId: long,advertiserIoId: long,advertiserLiId: long,creativeId: long,inventorySourceId: long,bidStrategyTypeId: int,pixelId: long,contentCategoryId: int,userSegmentId: int,creativeWidth: int,creativeHeight: int,bucketizedCreativeHeight: int,bucketizedCreativeWidth: int,bucketizedAdvertiserLiFrequency: int,trackingType: int,winningBidPrice: double,impressions: long,conversions: long,clicks: long,creativeOfferType: int,moneySpent: double,licenseeCost: double,licenseeRevenue: double,platformCost: double,platformRevenue: double,statusCode: int,impressionClickValidationStatusCode: int,advertiserTargetingExpression: chararray,userSegments: {t: (segmentId: int,weight: float)},conversionType: int,creativeViewFrequency: int,creativeClickFrequency: int,advertiserIoViewFrequency: int,advertiserIoClickFrequency: int,impressionPiggybackPixels: {t: (id: int)},creativeViewFrequencyOld: int,dataCenterId: int,adSpotId: long,pageType: int,numSlots: int,slotPosition: int,debugStatusCode: long,targetedSegments: {t: (id: int)},blockedSegments: {t: (id: int)})},minproc:bag{T:tuple(invalidLL: int,timestamp: long,aggregatorId: int,urid: chararray,isLearning: int,userCookie: chararray,country: int,region: int,city: int,siteId: long,foldPosition: int,learningPercentage: double,pageCategories: {t: (categoryId: int,categoryWeight: double)},bidInfoListSize: int,bids: {t: (advLiId: long,advIoId: long,advId: long,bidAmount: double,matchingPageCategoryId: int,creativeHeight: int,creativeWidth: int,matchingUserSegmentId: int)},eligibleLisByType: {t: (eligibleLiType: int,eligibleLis: {t: (eligibleLiId: int)})})});

describe fcurlog;

--amtjson = foreach fcurlog generate id,com.hortonworks.pig.udf.ToJson(amt) as amtjson;
--describe amtjson;
--store amtjson into 'hbase://smalluser' USING  org.apache.pig.backend.hadoop.hbase.HBaseStorage('r:amtjson');

--dcojson = foreach fcurlog generate id,com.hortonworks.pig.udf.ToJson(dco) as dcojson;
--describe dcojson;
--store dcojson into 'hbase://smalluser' USING  org.apache.pig.backend.hadoop.hbase.HBaseStorage('r:dcojson');

--rtbjson = foreach fcurlog generate id,com.hortonworks.pig.udf.ToJson(rtb) as rtbjson;
--describe rtbjson;
--store rtbjson into 'hbase://smalluser' USING  org.apache.pig.backend.hadoop.hbase.HBaseStorage('r:rtbjson');

minprocjson = foreach fcurlog generate id,com.hortonworks.pig.udf.ToJson(minproc) as minprocjson;
describe minprocjson;
store minprocjson into 'hbase://smalluser' USING  org.apache.pig.backend.hadoop.hbase.HBaseStorage('r:minprocjson');


